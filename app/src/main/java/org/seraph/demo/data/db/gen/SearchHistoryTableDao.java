package org.seraph.demo.data.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.seraph.demo.data.db.table.SearchHistoryTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_HISTORY_TABLE".
*/
public class SearchHistoryTableDao extends AbstractDao<SearchHistoryTable, Long> {

    public static final String TABLENAME = "SEARCH_HISTORY_TABLE";

    /**
     * Properties of entity SearchHistoryTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property SearchKey = new Property(3, String.class, "searchKey", false, "SEARCH_KEY");
        public final static Property SearchTime = new Property(4, long.class, "searchTime", false, "SEARCH_TIME");
    }


    public SearchHistoryTableDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_HISTORY_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TYPE\" TEXT," + // 2: type
                "\"SEARCH_KEY\" TEXT," + // 3: searchKey
                "\"SEARCH_TIME\" INTEGER NOT NULL );"); // 4: searchTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_HISTORY_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchHistoryTable entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(4, searchKey);
        }
        stmt.bindLong(5, entity.getSearchTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchHistoryTable entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String searchKey = entity.getSearchKey();
        if (searchKey != null) {
            stmt.bindString(4, searchKey);
        }
        stmt.bindLong(5, entity.getSearchTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchHistoryTable readEntity(Cursor cursor, int offset) {
        SearchHistoryTable entity = new SearchHistoryTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // searchKey
            cursor.getLong(offset + 4) // searchTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchHistoryTable entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSearchKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSearchTime(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchHistoryTable entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchHistoryTable entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchHistoryTable entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
